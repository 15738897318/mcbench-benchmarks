function [param, cmbfast_stdout, elapsed_time] = cmbfast(varargin)

% =========================================================================
% cmbfast.m - A wrapper routine for calling CMBFAST from within Matlab
% Last modified: January 25, 2006
% Judd D. Bowman
%
% CMBFAST is a Fortran code developed by U. Seljak and M. Zaldarriaga for 
% calculating cosmic microwave background anisotropy, polarization, and 
% matter power spectra.  (See http://cmbfast.org for more information).
% This Matlab function is intended only to be a wrapper routine to simplify 
% calling the CMBFAST executable from within Matlab.  It requires CMBFAST
% to be installed on the local machine and compiled with the flag: 
% --with-iargc=yes.  
%
%                                 * * *
%
% IMPORTANT: For this function to work properly, you must edit the first 
% few lines of code below to provide the absolute path to your CMBFAST 
% installation.  The variables to edit are named: param.cmb_dir and 
% param.cmb_exe.  You will most likely also want to edit the default output 
% directory by changing param.output_dir.  
%
%                                 * * *
% INPUT
% =====
% This function calls a CMBFAST executable (must be installed separately)
% and passes to it a set of parameters given by the default settings 
% contained in this code.  The default parameters can be modified by
% passing arguments to this function in keyword-value pairs.  For more
% information about CMBFAST input parameters, see:
% http://cfa-www.harvard.edu/~mzaldarr/CMBFAST/parameters.html
%
% To change any CMBFAST parameter, use keyword-value argument pairs to 
% this function.  For example, to change the Hubble Constant, h0, from
% its default value of 65 km/s/Mpc, call cmbfast with the following
% arguments:
%
% >> cmbfast('h0', 72);
%
% Or to change multiple parameters:
%
% >> cmbfast('h0', 72, 'quin', 1, 'wdyn', -1.2);
%
% Some CMBFAST parameters support passing multiple values.  One example of
% this is the redshift at which to calculate the transfer function for the
% matter power spectrum.  For these cases, the values in a keyword-value 
% pair may be arrays:
%
% >> cmbfast('h0', 72, 'ntf', 3, 'z', [1, 1.5, 2]);
%
% Please note that there is very little error checking on the function
% input arguments.  Malformed keyword-value pairs may cause the function to
% fail or CMBFAST to return unintended results.
%
%
% OUTPUT
% ======
% The output of this function is of two types: 1) The function itself 
% returns three parameters within the Matlab environment, and 2) the 
% CMBFAST executable writes one or more files to disk containing the 
% results of the calculation.  
%
% The parameters returned by the function are captured by calling 
% cmbfast from within Matlab like this: 
%
% >> [param, cmbfast_stdout, elapsed_time] = cmbfast('h0', 72); 
%
% Here, param is a structure containing the parameters given to CMBFAST, 
% cmbfast_stdout is the output of CMBFAST to stdout, and elapsed_time 
% reports how many seconds this function required to execute.
%
% The second type of output -- the actual output of the CMBFAST 
% executable -- is contained in one or more files which it writes on 
% completion of the run.  There are default names for these files in 
% the code below, but they may also be modified using the keyword-value 
% argument pairs.  The output file keywords are:
%
% ftf = transfer function file
% fcl = cmb power spectrum file (unlensed)
% fgl = cmb power spectrum file (lensed)
% tcl = cmb power spectrum file (tensor)
% fts = fits output file
%
% As an example, to modify the name of the output file for the transfer 
% function generated by CMBFAST, call the cmbfast function with an 
% argument pair like this:
% 
% >> cmbfast('ftf', 'C:/mydadta/myfilename.dat'); 
% 
% Additionally, you can specify the file name for the file containing
% the parameters passed to the CMBFAST executable by this funtion using 
% the keyword: fpa.
%
%
% EXTRAS
% ======
% In addition to this wrapper function, two other related helper functions 
% are provided: cmbfast_read and cmbfast_clean.  The cmbfast_read
% routine may be helpful to load the output files generated by the CMBFAST
% executable back into the Matlab environment.
%
% >> results = cmbfast_read(param);
%
% Here, the param argument is from the output of cmbfast and contains the 
% output file names to load, and results is a structure containing arrays 
% of data.
%
% The cmbfast_clean routine erases all the output files associated with a 
% given run: 
%
% >> cmbfast_clean(param);
%
% =========================================================================


% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% <<<<<<<<<<<<<<<<<<<<<< BEGIN CUSTOMIZABLE SECTION >>>>>>>>>>>>>>>>>>>>>>>
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------

% Set CMBFAST INSTALLATION [** EDIT THIS **]
param.cmb_dir = 'E:/cmbfast4.5.1/';     % CMBFAST directorya
param.cmb_exe = 'cmb.exe';              % CMBFAST executable filename

% Set the DEFAULT OUTPUT DIRECTORY [** EDIT THIS **]
param.output_dir = 'E:/EOR/data/forecast/';

% Set the DEFAULT OUTPUT BASE FILE NAME.  [** OPTIONAL TO EDIT **]
% Currently, this produces a unique base file name of the form 
% 'cmbfast_yyyymmddTHHMMSS' for each run, where the date and time are 
% filled in at the start of the run.
param.output_filebase = sprintf('cmbfast_%s', datestr(now, 30));

% Before setting the default CMBFAST parameter values, first make sure any 
% changes to the default installation and output files are taken in to
% account. [** DO NOT EDIT **]
keywords = varargin(1:2:end);
values = varargin(2:2:end);
replace = { ...
        strmatch('cmb_dir', keywords, 'exact'); ...
        strmatch('output_dir', keywords, 'exact'); ...
        strmatch('output_filebase', keywords, 'exact'); ... 
};

for n = 1:3
    if (~isempty(replace{n}))
        eval( ['param.', keywords{replace{n}}, ' = values{replace{n}};'] );
    end
end

% Set DEFAULT CMBFAST PARAMETERS [** OPTIONAL TO EDIT **]
param.fjl = [param.cmb_dir 'jl.dat'];
param.ujl = [param.cmb_dir 'ujl.dat'];
param.jgl = [param.cmb_dir 'jlens.dat'];
param.fpa = [param.output_dir param.output_filebase '.par'];
param.ftf = [param.output_dir param.output_filebase '_trans.dat'];
param.fcl = [param.output_dir param.output_filebase '_cl_unlensed.dat'];
param.fgl = [param.output_dir param.output_filebase '_cl_lensed.dat'];
param.tcl = [param.output_dir param.output_filebase '_cl_tensor.dat'];
param.fts = [param.output_dir param.output_filebase '_cl.fits'];
param.initfl = 1;
param.ict = 2;
param.lmo = 1500;
param.akmax0 = 3000.0;
param.akmaxt = 10.0;
param.nlnkt = 20;
param.ntf = 1;
param.z = 0.0;
param.quin = 0;
param.wdyn = -1;
param.omegab = 0.05;
param.omegac = 0.3;
param.omegav = 0.65;
param.omegan = 0.0;
param.h0 = 65.0;
param.tcmb = 2.726;
param.yhe = 0.24;
param.annur = 3.04;
param.annunr = 0.0;
param.rcflag = 0;
param.riflag = 0.0;
param.optdlss = 0.0;
param.zri = 18.0;
param.rif = 1.0;
param.itflag = 0;
param.nn = 1;
param.an = 1.0;
param.alphans = 0.0;
param.itn = 0;
param.ant = 0.0;
param.irt = 0;
param.rat = 0.0;
param.lensflag = 0;

% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% <<<<<<<<<<<<<<<<<<<<<<< END CUSTOMIZABLE SECTION >>>>>>>>>>>>>>>>>>>>>>>>
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------


% The code below this point modifies the default CMBFAST parameters
% according to the function input arguments, writes the parameter file to 
% pass to CMBFAST, and calls the CMBFAST executable.  There should be no
% need to edit any of this.

% Start a timer
tic;

% Change default values according to function input arguments
for n = 1:2:nargin
    eval( ['param.', varargin{n}, ' = varargin{n+1};'] );
end

% Catch two convenience items

% 1 - If more than one redshift is given for transfer functions but no file 
% names are spesified, then fill in enough default file names.
if ( length(param.z) > 1 & ~iscell(param.ftf) )
    param.ftf = cell(length(param.z), 1);
    for n=1:length(param.z)
        param.ftf{n} = [default_filename_base sprintf('_trans_%u.dat', n)];
    end
end

% 2 - If more than one redshift is given for transfer functions, then make
% sure the number of transfer functions 'ntf' value is set to the same. 
if ( length(param.z) > 1 )
    param.ntf = length(param.z);
end

% Open the file to write the CMBFAST parameters
fid = fopen(param.fpa, 'w');

% Write each parameter on a separate line
fprintf(fid, 'initfl = %d\n', param.initfl); 
fprintf(fid, 'ict = %d\n', param.ict); 
fprintf(fid, 'lmo = %d\n', param.lmo); 
fprintf(fid, 'akmax0 = %f\n', param.akmax0); 
fprintf(fid, 'akmaxt = %f\n', param.akmaxt); 
fprintf(fid, 'nlnkt = %d\n', param.nlnkt); 
fprintf(fid, 'ntf = %d\n', param.ntf); 

for n = 1:length(param.z)
    fprintf(fid, 'z(%u) = %f\n', n, param.z(n)); 
end

if (iscell(param.ftf))
    for n = 1:length(param.ftf)
        fprintf(fid, 'ftf(%u) = %s\n', n, param.ftf{n});
    end
else
    fprintf(fid, 'ftf(1) = %s\n', param.ftf);
end
    
fprintf(fid, 'quin = %d\n', param.quin); 
fprintf(fid, 'wdyn = %f\n', param.wdyn); 
fprintf(fid, 'omegab = %f\n', param.omegab); 
fprintf(fid, 'omegac = %f\n', param.omegac); 
fprintf(fid, 'omegav = %f\n', param.omegav); 
fprintf(fid, 'omegan = %f\n', param.omegan); 
fprintf(fid, 'h0 = %f\n', param.h0); 
fprintf(fid, 'tcmb = %f\n', param.tcmb); 
fprintf(fid, 'yhe = %f\n', param.yhe); 
fprintf(fid, 'annur = %f\n', param.annur); 
fprintf(fid, 'annunr = %f\n', param.annunr); 
fprintf(fid, 'rcflag = %d\n', param.rcflag); 
fprintf(fid, 'riflag = %f\n', param.riflag); 
fprintf(fid, 'optdlss = %f\n', param.optdlss); 
fprintf(fid, 'zri = %f\n', param.zri); 
fprintf(fid, 'rif = %f\n', param.rif); 
fprintf(fid, 'itflag = %d\n', param.itflag); 
fprintf(fid, 'nn = %d\n', param.nn); 

for n=1:length(param.an)
    fprintf(fid, 'an(%u) = %f\n', n, param.an(n)); 
end

for n=1:length(param.alphans)
    fprintf(fid, 'alphans(%u)= %f\n', n, param.alphans(n)); 
end

fprintf(fid, 'itn = %d\n', param.itn); 

for n=1:length(param.ant)
    fprintf(fid, 'ant(%u) = %f\n', n, param.ant(n)); 
end
    
fprintf(fid, 'irt = %d\n', param.irt); 

for n=1:length(param.rat)
    fprintf(fid, 'rat(%u) = %f\n', n, param.rat(n)); 
end

fprintf(fid, 'lensflag = %d\n', param.lensflag); 
fprintf(fid, 'fcl = %s\n', param.fcl); 
fprintf(fid, 'fgl = %s\n', param.fgl); 
fprintf(fid, 'fjl = %s\n', param.fjl); 
fprintf(fid, 'tcl = %s\n', param.tcl); 
fprintf(fid, 'ujl = %s\n', param.ujl); 
fprintf(fid, 'fts = %s\n', param.fts); 
fprintf(fid, 'jgl = %s\n', param.jgl); 

% Close the parameter file
fclose(fid);

% Run cmbfast
[s, cmbfast_stdout] = system(sprintf('%s %s', [param.cmb_dir param.cmb_exe], param.fpa));

% Stop timing
elapsed_time = toc;

